package com.blockchain.commune.mapper;

import com.blockchain.commune.model.MarketBasicInfo;
import com.blockchain.commune.model.MarketBasicInfoCriteria.Criteria;
import com.blockchain.commune.model.MarketBasicInfoCriteria.Criterion;
import com.blockchain.commune.model.MarketBasicInfoCriteria;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class MarketBasicInfoSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table market_basic_info
     *
     * @mbg.generated
     */
    public String countByExample(MarketBasicInfoCriteria example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("market_basic_info");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table market_basic_info
     *
     * @mbg.generated
     */
    public String deleteByExample(MarketBasicInfoCriteria example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("market_basic_info");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table market_basic_info
     *
     * @mbg.generated
     */
    public String insertSelective(MarketBasicInfo record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("market_basic_info");
        
        if (record.getId() != null) {
            sql.VALUES("id", "#{id,jdbcType=VARCHAR}");
        }
        
        if (record.getLogo() != null) {
            sql.VALUES("logo", "#{logo,jdbcType=VARCHAR}");
        }
        
        if (record.getExchange() != null) {
            sql.VALUES("exchange", "#{exchange,jdbcType=VARCHAR}");
        }
        
        if (record.getPrice() != null) {
            sql.VALUES("price", "#{price,jdbcType=VARCHAR}");
        }
        
        if (record.getPercent() != null) {
            sql.VALUES("percent", "#{percent,jdbcType=VARCHAR}");
        }
        
        if (record.getConverCoin() != null) {
            sql.VALUES("conver_coin", "#{converCoin,jdbcType=VARCHAR}");
        }
        
        if (record.getConverBtc() != null) {
            sql.VALUES("conver_btc", "#{converBtc,jdbcType=VARCHAR}");
        }
        
        if (record.getTitle() != null) {
            sql.VALUES("title", "#{title,jdbcType=VARCHAR}");
        }
        
        if (record.getAmount24h() != null) {
            sql.VALUES("amount_24h", "#{amount24h,jdbcType=VARCHAR}");
        }
        
        if (record.getVolume24h() != null) {
            sql.VALUES("volume_24h", "#{volume24h,jdbcType=VARCHAR}");
        }
        
        if (record.getTradedvalue() != null) {
            sql.VALUES("tradedvalue", "#{tradedvalue,jdbcType=VARCHAR}");
        }
        
        if (record.getGlobalMarket() != null) {
            sql.VALUES("global_market", "#{globalMarket,jdbcType=VARCHAR}");
        }
        
        if (record.getCreatetime() != null) {
            sql.VALUES("createtime", "#{createtime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getKlineLink() != null) {
            sql.VALUES("kline_link", "#{klineLink,jdbcType=VARCHAR}");
        }
        
        if (record.getCurrencyOnMarketId() != null) {
            sql.VALUES("currency_on_market_id", "#{currencyOnMarketId,jdbcType=VARCHAR}");
        }
        
        if (record.getMarketId() != null) {
            sql.VALUES("market_id", "#{marketId,jdbcType=VARCHAR}");
        }
        
        if (record.getMarketName() != null) {
            sql.VALUES("market_name", "#{marketName,jdbcType=VARCHAR}");
        }
        
        if (record.getSymbol() != null) {
            sql.VALUES("symbol", "#{symbol,jdbcType=VARCHAR}");
        }
        
        if (record.getAnchor() != null) {
            sql.VALUES("anchor", "#{anchor,jdbcType=VARCHAR}");
        }
        
        if (record.getSelectStatus() != null) {
            sql.VALUES("select_status", "#{selectStatus,jdbcType=TINYINT}");
        }
        
        if (record.getContext() != null) {
            sql.VALUES("context", "#{context,jdbcType=LONGVARCHAR}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table market_basic_info
     *
     * @mbg.generated
     */
    public String selectByExampleWithBLOBs(MarketBasicInfoCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("id");
        } else {
            sql.SELECT("id");
        }
        sql.SELECT("logo");
        sql.SELECT("exchange");
        sql.SELECT("price");
        sql.SELECT("percent");
        sql.SELECT("conver_coin");
        sql.SELECT("conver_btc");
        sql.SELECT("title");
        sql.SELECT("amount_24h");
        sql.SELECT("volume_24h");
        sql.SELECT("tradedvalue");
        sql.SELECT("global_market");
        sql.SELECT("createtime");
        sql.SELECT("kline_link");
        sql.SELECT("currency_on_market_id");
        sql.SELECT("market_id");
        sql.SELECT("market_name");
        sql.SELECT("symbol");
        sql.SELECT("anchor");
        sql.SELECT("select_status");
        sql.SELECT("context");
        sql.FROM("market_basic_info");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table market_basic_info
     *
     * @mbg.generated
     */
    public String selectByExample(MarketBasicInfoCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("id");
        } else {
            sql.SELECT("id");
        }
        sql.SELECT("logo");
        sql.SELECT("exchange");
        sql.SELECT("price");
        sql.SELECT("percent");
        sql.SELECT("conver_coin");
        sql.SELECT("conver_btc");
        sql.SELECT("title");
        sql.SELECT("amount_24h");
        sql.SELECT("volume_24h");
        sql.SELECT("tradedvalue");
        sql.SELECT("global_market");
        sql.SELECT("createtime");
        sql.SELECT("kline_link");
        sql.SELECT("currency_on_market_id");
        sql.SELECT("market_id");
        sql.SELECT("market_name");
        sql.SELECT("symbol");
        sql.SELECT("anchor");
        sql.SELECT("select_status");
        sql.FROM("market_basic_info");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table market_basic_info
     *
     * @mbg.generated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        MarketBasicInfo record = (MarketBasicInfo) parameter.get("record");
        MarketBasicInfoCriteria example = (MarketBasicInfoCriteria) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("market_basic_info");
        
        if (record.getId() != null) {
            sql.SET("id = #{record.id,jdbcType=VARCHAR}");
        }
        
        if (record.getLogo() != null) {
            sql.SET("logo = #{record.logo,jdbcType=VARCHAR}");
        }
        
        if (record.getExchange() != null) {
            sql.SET("exchange = #{record.exchange,jdbcType=VARCHAR}");
        }
        
        if (record.getPrice() != null) {
            sql.SET("price = #{record.price,jdbcType=VARCHAR}");
        }
        
        if (record.getPercent() != null) {
            sql.SET("percent = #{record.percent,jdbcType=VARCHAR}");
        }
        
        if (record.getConverCoin() != null) {
            sql.SET("conver_coin = #{record.converCoin,jdbcType=VARCHAR}");
        }
        
        if (record.getConverBtc() != null) {
            sql.SET("conver_btc = #{record.converBtc,jdbcType=VARCHAR}");
        }
        
        if (record.getTitle() != null) {
            sql.SET("title = #{record.title,jdbcType=VARCHAR}");
        }
        
        if (record.getAmount24h() != null) {
            sql.SET("amount_24h = #{record.amount24h,jdbcType=VARCHAR}");
        }
        
        if (record.getVolume24h() != null) {
            sql.SET("volume_24h = #{record.volume24h,jdbcType=VARCHAR}");
        }
        
        if (record.getTradedvalue() != null) {
            sql.SET("tradedvalue = #{record.tradedvalue,jdbcType=VARCHAR}");
        }
        
        if (record.getGlobalMarket() != null) {
            sql.SET("global_market = #{record.globalMarket,jdbcType=VARCHAR}");
        }
        
        if (record.getCreatetime() != null) {
            sql.SET("createtime = #{record.createtime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getKlineLink() != null) {
            sql.SET("kline_link = #{record.klineLink,jdbcType=VARCHAR}");
        }
        
        if (record.getCurrencyOnMarketId() != null) {
            sql.SET("currency_on_market_id = #{record.currencyOnMarketId,jdbcType=VARCHAR}");
        }
        
        if (record.getMarketId() != null) {
            sql.SET("market_id = #{record.marketId,jdbcType=VARCHAR}");
        }
        
        if (record.getMarketName() != null) {
            sql.SET("market_name = #{record.marketName,jdbcType=VARCHAR}");
        }
        
        if (record.getSymbol() != null) {
            sql.SET("symbol = #{record.symbol,jdbcType=VARCHAR}");
        }
        
        if (record.getAnchor() != null) {
            sql.SET("anchor = #{record.anchor,jdbcType=VARCHAR}");
        }
        
        if (record.getSelectStatus() != null) {
            sql.SET("select_status = #{record.selectStatus,jdbcType=TINYINT}");
        }
        
        if (record.getContext() != null) {
            sql.SET("context = #{record.context,jdbcType=LONGVARCHAR}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table market_basic_info
     *
     * @mbg.generated
     */
    public String updateByExampleWithBLOBs(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("market_basic_info");
        
        sql.SET("id = #{record.id,jdbcType=VARCHAR}");
        sql.SET("logo = #{record.logo,jdbcType=VARCHAR}");
        sql.SET("exchange = #{record.exchange,jdbcType=VARCHAR}");
        sql.SET("price = #{record.price,jdbcType=VARCHAR}");
        sql.SET("percent = #{record.percent,jdbcType=VARCHAR}");
        sql.SET("conver_coin = #{record.converCoin,jdbcType=VARCHAR}");
        sql.SET("conver_btc = #{record.converBtc,jdbcType=VARCHAR}");
        sql.SET("title = #{record.title,jdbcType=VARCHAR}");
        sql.SET("amount_24h = #{record.amount24h,jdbcType=VARCHAR}");
        sql.SET("volume_24h = #{record.volume24h,jdbcType=VARCHAR}");
        sql.SET("tradedvalue = #{record.tradedvalue,jdbcType=VARCHAR}");
        sql.SET("global_market = #{record.globalMarket,jdbcType=VARCHAR}");
        sql.SET("createtime = #{record.createtime,jdbcType=TIMESTAMP}");
        sql.SET("kline_link = #{record.klineLink,jdbcType=VARCHAR}");
        sql.SET("currency_on_market_id = #{record.currencyOnMarketId,jdbcType=VARCHAR}");
        sql.SET("market_id = #{record.marketId,jdbcType=VARCHAR}");
        sql.SET("market_name = #{record.marketName,jdbcType=VARCHAR}");
        sql.SET("symbol = #{record.symbol,jdbcType=VARCHAR}");
        sql.SET("anchor = #{record.anchor,jdbcType=VARCHAR}");
        sql.SET("select_status = #{record.selectStatus,jdbcType=TINYINT}");
        sql.SET("context = #{record.context,jdbcType=LONGVARCHAR}");
        
        MarketBasicInfoCriteria example = (MarketBasicInfoCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table market_basic_info
     *
     * @mbg.generated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("market_basic_info");
        
        sql.SET("id = #{record.id,jdbcType=VARCHAR}");
        sql.SET("logo = #{record.logo,jdbcType=VARCHAR}");
        sql.SET("exchange = #{record.exchange,jdbcType=VARCHAR}");
        sql.SET("price = #{record.price,jdbcType=VARCHAR}");
        sql.SET("percent = #{record.percent,jdbcType=VARCHAR}");
        sql.SET("conver_coin = #{record.converCoin,jdbcType=VARCHAR}");
        sql.SET("conver_btc = #{record.converBtc,jdbcType=VARCHAR}");
        sql.SET("title = #{record.title,jdbcType=VARCHAR}");
        sql.SET("amount_24h = #{record.amount24h,jdbcType=VARCHAR}");
        sql.SET("volume_24h = #{record.volume24h,jdbcType=VARCHAR}");
        sql.SET("tradedvalue = #{record.tradedvalue,jdbcType=VARCHAR}");
        sql.SET("global_market = #{record.globalMarket,jdbcType=VARCHAR}");
        sql.SET("createtime = #{record.createtime,jdbcType=TIMESTAMP}");
        sql.SET("kline_link = #{record.klineLink,jdbcType=VARCHAR}");
        sql.SET("currency_on_market_id = #{record.currencyOnMarketId,jdbcType=VARCHAR}");
        sql.SET("market_id = #{record.marketId,jdbcType=VARCHAR}");
        sql.SET("market_name = #{record.marketName,jdbcType=VARCHAR}");
        sql.SET("symbol = #{record.symbol,jdbcType=VARCHAR}");
        sql.SET("anchor = #{record.anchor,jdbcType=VARCHAR}");
        sql.SET("select_status = #{record.selectStatus,jdbcType=TINYINT}");
        
        MarketBasicInfoCriteria example = (MarketBasicInfoCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table market_basic_info
     *
     * @mbg.generated
     */
    public String updateByPrimaryKeySelective(MarketBasicInfo record) {
        SQL sql = new SQL();
        sql.UPDATE("market_basic_info");
        
        if (record.getLogo() != null) {
            sql.SET("logo = #{logo,jdbcType=VARCHAR}");
        }
        
        if (record.getExchange() != null) {
            sql.SET("exchange = #{exchange,jdbcType=VARCHAR}");
        }
        
        if (record.getPrice() != null) {
            sql.SET("price = #{price,jdbcType=VARCHAR}");
        }
        
        if (record.getPercent() != null) {
            sql.SET("percent = #{percent,jdbcType=VARCHAR}");
        }
        
        if (record.getConverCoin() != null) {
            sql.SET("conver_coin = #{converCoin,jdbcType=VARCHAR}");
        }
        
        if (record.getConverBtc() != null) {
            sql.SET("conver_btc = #{converBtc,jdbcType=VARCHAR}");
        }
        
        if (record.getTitle() != null) {
            sql.SET("title = #{title,jdbcType=VARCHAR}");
        }
        
        if (record.getAmount24h() != null) {
            sql.SET("amount_24h = #{amount24h,jdbcType=VARCHAR}");
        }
        
        if (record.getVolume24h() != null) {
            sql.SET("volume_24h = #{volume24h,jdbcType=VARCHAR}");
        }
        
        if (record.getTradedvalue() != null) {
            sql.SET("tradedvalue = #{tradedvalue,jdbcType=VARCHAR}");
        }
        
        if (record.getGlobalMarket() != null) {
            sql.SET("global_market = #{globalMarket,jdbcType=VARCHAR}");
        }
        
        if (record.getCreatetime() != null) {
            sql.SET("createtime = #{createtime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getKlineLink() != null) {
            sql.SET("kline_link = #{klineLink,jdbcType=VARCHAR}");
        }
        
        if (record.getCurrencyOnMarketId() != null) {
            sql.SET("currency_on_market_id = #{currencyOnMarketId,jdbcType=VARCHAR}");
        }
        
        if (record.getMarketId() != null) {
            sql.SET("market_id = #{marketId,jdbcType=VARCHAR}");
        }
        
        if (record.getMarketName() != null) {
            sql.SET("market_name = #{marketName,jdbcType=VARCHAR}");
        }
        
        if (record.getSymbol() != null) {
            sql.SET("symbol = #{symbol,jdbcType=VARCHAR}");
        }
        
        if (record.getAnchor() != null) {
            sql.SET("anchor = #{anchor,jdbcType=VARCHAR}");
        }
        
        if (record.getSelectStatus() != null) {
            sql.SET("select_status = #{selectStatus,jdbcType=TINYINT}");
        }
        
        if (record.getContext() != null) {
            sql.SET("context = #{context,jdbcType=LONGVARCHAR}");
        }
        
        sql.WHERE("id = #{id,jdbcType=VARCHAR}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table market_basic_info
     *
     * @mbg.generated
     */
    protected void applyWhere(SQL sql, MarketBasicInfoCriteria example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}