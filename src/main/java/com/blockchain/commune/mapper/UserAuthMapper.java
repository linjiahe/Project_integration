package com.blockchain.commune.mapper;

import com.blockchain.commune.model.UserAuth;
import com.blockchain.commune.model.UserAuthCriteria;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

public interface UserAuthMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_auth
     *
     * @mbg.generated
     */
    @SelectProvider(type=UserAuthSqlProvider.class, method="countByExample")
    long countByExample(UserAuthCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_auth
     *
     * @mbg.generated
     */
    @DeleteProvider(type=UserAuthSqlProvider.class, method="deleteByExample")
    int deleteByExample(UserAuthCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_auth
     *
     * @mbg.generated
     */
    @Delete({
        "delete from user_auth",
        "where user_id = #{userId,jdbcType=VARCHAR}"
    })
    int deleteByPrimaryKey(String userId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_auth
     *
     * @mbg.generated
     */
    @Insert({
        "insert into user_auth (user_id, name, ",
        "idNo, sex, birthday, ",
        "area, province, ",
        "city, prefecture, ",
        "addrcode, lastcode, ",
        "front, back, user_pic, ",
        "create_time, update_time)",
        "values (#{userId,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, ",
        "#{idno,jdbcType=VARCHAR}, #{sex,jdbcType=CHAR}, #{birthday,jdbcType=VARCHAR}, ",
        "#{area,jdbcType=VARCHAR}, #{province,jdbcType=VARCHAR}, ",
        "#{city,jdbcType=VARCHAR}, #{prefecture,jdbcType=VARCHAR}, ",
        "#{addrcode,jdbcType=VARCHAR}, #{lastcode,jdbcType=VARCHAR}, ",
        "#{front,jdbcType=VARCHAR}, #{back,jdbcType=VARCHAR}, #{userPic,jdbcType=VARCHAR}, ",
        "#{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})"
    })
    int insert(UserAuth record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_auth
     *
     * @mbg.generated
     */
    @InsertProvider(type=UserAuthSqlProvider.class, method="insertSelective")
    int insertSelective(UserAuth record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_auth
     *
     * @mbg.generated
     */
    @SelectProvider(type=UserAuthSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="user_id", property="userId", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="name", property="name", jdbcType=JdbcType.VARCHAR),
        @Result(column="idNo", property="idno", jdbcType=JdbcType.VARCHAR),
        @Result(column="sex", property="sex", jdbcType=JdbcType.CHAR),
        @Result(column="birthday", property="birthday", jdbcType=JdbcType.VARCHAR),
        @Result(column="area", property="area", jdbcType=JdbcType.VARCHAR),
        @Result(column="province", property="province", jdbcType=JdbcType.VARCHAR),
        @Result(column="city", property="city", jdbcType=JdbcType.VARCHAR),
        @Result(column="prefecture", property="prefecture", jdbcType=JdbcType.VARCHAR),
        @Result(column="addrcode", property="addrcode", jdbcType=JdbcType.VARCHAR),
        @Result(column="lastcode", property="lastcode", jdbcType=JdbcType.VARCHAR),
        @Result(column="front", property="front", jdbcType=JdbcType.VARCHAR),
        @Result(column="back", property="back", jdbcType=JdbcType.VARCHAR),
        @Result(column="user_pic", property="userPic", jdbcType=JdbcType.VARCHAR),
        @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP)
    })
    List<UserAuth> selectByExample(UserAuthCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_auth
     *
     * @mbg.generated
     */
    @Select({
        "select",
        "user_id, name, idNo, sex, birthday, area, province, city, prefecture, addrcode, ",
        "lastcode, front, back, user_pic, create_time, update_time",
        "from user_auth",
        "where user_id = #{userId,jdbcType=VARCHAR}"
    })
    @Results({
        @Result(column="user_id", property="userId", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="name", property="name", jdbcType=JdbcType.VARCHAR),
        @Result(column="idNo", property="idno", jdbcType=JdbcType.VARCHAR),
        @Result(column="sex", property="sex", jdbcType=JdbcType.CHAR),
        @Result(column="birthday", property="birthday", jdbcType=JdbcType.VARCHAR),
        @Result(column="area", property="area", jdbcType=JdbcType.VARCHAR),
        @Result(column="province", property="province", jdbcType=JdbcType.VARCHAR),
        @Result(column="city", property="city", jdbcType=JdbcType.VARCHAR),
        @Result(column="prefecture", property="prefecture", jdbcType=JdbcType.VARCHAR),
        @Result(column="addrcode", property="addrcode", jdbcType=JdbcType.VARCHAR),
        @Result(column="lastcode", property="lastcode", jdbcType=JdbcType.VARCHAR),
        @Result(column="front", property="front", jdbcType=JdbcType.VARCHAR),
        @Result(column="back", property="back", jdbcType=JdbcType.VARCHAR),
        @Result(column="user_pic", property="userPic", jdbcType=JdbcType.VARCHAR),
        @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP)
    })
    UserAuth selectByPrimaryKey(String userId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_auth
     *
     * @mbg.generated
     */
    @UpdateProvider(type=UserAuthSqlProvider.class, method="updateByExampleSelective")
    int updateByExampleSelective(@Param("record") UserAuth record, @Param("example") UserAuthCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_auth
     *
     * @mbg.generated
     */
    @UpdateProvider(type=UserAuthSqlProvider.class, method="updateByExample")
    int updateByExample(@Param("record") UserAuth record, @Param("example") UserAuthCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_auth
     *
     * @mbg.generated
     */
    @UpdateProvider(type=UserAuthSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(UserAuth record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_auth
     *
     * @mbg.generated
     */
    @Update({
        "update user_auth",
        "set name = #{name,jdbcType=VARCHAR},",
          "idNo = #{idno,jdbcType=VARCHAR},",
          "sex = #{sex,jdbcType=CHAR},",
          "birthday = #{birthday,jdbcType=VARCHAR},",
          "area = #{area,jdbcType=VARCHAR},",
          "province = #{province,jdbcType=VARCHAR},",
          "city = #{city,jdbcType=VARCHAR},",
          "prefecture = #{prefecture,jdbcType=VARCHAR},",
          "addrcode = #{addrcode,jdbcType=VARCHAR},",
          "lastcode = #{lastcode,jdbcType=VARCHAR},",
          "front = #{front,jdbcType=VARCHAR},",
          "back = #{back,jdbcType=VARCHAR},",
          "user_pic = #{userPic,jdbcType=VARCHAR},",
          "create_time = #{createTime,jdbcType=TIMESTAMP},",
          "update_time = #{updateTime,jdbcType=TIMESTAMP}",
        "where user_id = #{userId,jdbcType=VARCHAR}"
    })
    int updateByPrimaryKey(UserAuth record);
}